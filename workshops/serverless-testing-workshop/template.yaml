# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for serverless-test-workshop

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  iECRStreamlitPort:
    Type: Number
    Description: ECR TCP port for Streamlit UI hosting.
    Default: "8501"

Resources:
  # DynamoDB Resource https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html

  # This single-table DynamoDB design has a generic Partition Key (PK) and Sort Key (RK), and the item fields
  # are dependent on the item type:
  #  "Unicorn Items"  :  PK = {id}, SK = "LOCATION", STATUS = "AVAILABLE|RESERVED|RETIRED"
  #  "Summary Items" :  PK = {statistic}, SK = "STAT", data = {value}

  UnicornInventoryTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: LOCATION
          AttributeType: S
        - AttributeName: STATUS
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "GSI_LOCATION"
          KeySchema:
            - AttributeName: "LOCATION"
              KeyType: "HASH"
            - AttributeName: "STATUS"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
    Metadata:
      SamResourceId: UnicornInventoryTable

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  UnicornInventoryBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub "unicorn-inv-${AWS::StackName}-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: True
    Metadata:
      SamResourceId: SampleBucket

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # The Lambda function supports the /request-url-for-inventory endpoint
  # The function returns a signed url for uploading a Unicorn inventory to S3

  CheckoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref UnicornInventoryTable
      CodeUri: src/Checkout/
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: UnicornInventoryTable
      Events:
        Checkout:
          Type: Api
          Properties:
            Path: /checkout
            Method: post

  GetInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName: !Ref UnicornInventoryTable
      CodeUri: src/GetInventory/
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: UnicornInventoryTable
          DYNAMODB_INDEX_NAME: "GSI_LOCATION"
      Events:
        Checkout:
          Type: Api
          Properties:
            Path: /list/{location}
            Method: get
            RequestParameters:
              - method.request.header.Authorization
              - method.request.querystring.page_token:
                  Required: false
                  Caching: false
              - method.request.querystring.available:
                  Required: false
                  Caching: false

  GetLocations:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName: !Ref UnicornInventoryTable
      CodeUri: src/GetLocations/
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: UnicornInventoryTable
      Events:
        Checkout:
          Type: Api
          Properties:
            Path: /locations
            Method: get
            RequestParameters:
              - method.request.header.Authorization

  GetSignedUrlForInventoryFilePost:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3WritePolicy:
            BucketName: !Sub "unicorn-inv-${AWS::StackName}-${AWS::AccountId}"
      CodeUri: src/GetSignedUrlForInventoryFilePost/
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          S3_BUCKET_NAME: !Sub "unicorn-inv-${AWS::StackName}-${AWS::AccountId}"
      Events:
        Checkout:
          Type: Api
          Properties:
            Path: /geturl
            Method: get

  FileValidator:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: src/FileValidator/
      Handler: app.lambda_handler
      Runtime: python3.11
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3ReadPolicy:
            BucketName: !Sub "unicorn-inv-${AWS::StackName}-${AWS::AccountId}"
  
  CreateLocations:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      CodeUri: src/CreateLocations/
      Handler: app.lambda_handler
      Runtime: python3.11
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: UnicornInventoryTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UnicornInventoryTable
  
  # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  SFProcessFile:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${AWS::StackName}-SFProcessFile-${AWS::AccountId}"
      DefinitionUri: src/FileProcessor/StateMachine.asl.json
      DefinitionSubstitutions:
        ValidateCSVFile: !GetAtt FileValidator.Arn
        UnicornTable: !Ref UnicornInventoryTable
        CreateLocations: !GetAtt CreateLocations.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateLocations
        - LambdaInvokePolicy:
            FunctionName: !Ref FileValidator
        - DynamoDBCrudPolicy:
            TableName: !Ref UnicornInventoryTable
        - S3ReadPolicy:
            BucketName: !Sub "unicorn-inv-${AWS::StackName}-${AWS::AccountId}"
        - StepFunctionsExecutionPolicy:
            StateMachineName: !Sub "${AWS::StackName}-SFProcessFile-${AWS::AccountId}"
      Events:
        NewInventoryFileInS3:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref UnicornInventoryBucket

##################################################
##################################################
##### demo-app (begin)
##################################################
##################################################

  #
  # Networking
  #  VPC, 2 Public Subnets, S3/ECR/Cloudwatch Service Endpoints, Internet Gateway
  #

  StreamlitVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/24
      EnableDnsHostnames : true
      EnableDnsSupport : true

  StreamlitSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StreamlitVPC
      CidrBlock: 192.168.0.0/25
      AvailabilityZone: !Sub "${AWS::Region}b"

  StreamlitSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref StreamlitVPC
      CidrBlock: 192.168.0.128/25
      AvailabilityZone: !Sub "${AWS::Region}c"

  StreamlitInternetGateway:
    Type: AWS::EC2::InternetGateway

  StreamlitGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StreamlitInternetGateway
      VpcId: !Ref StreamlitVPC

  StreamlitSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Streamlit UI Security Group"
      GroupName: !Sub "${AWS::StackName}-ds-sg"
      SecurityGroupEgress:
         - IpProtocol: tcp
           FromPort: 0
           ToPort: 65535
           CidrIp: 0.0.0.0/0
           Description: Allow outbound access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref iECRStreamlitPort
          ToPort: !Ref iECRStreamlitPort
          CidrIp: 0.0.0.0/0
          Description: Inbound only on Streamlit port
      VpcId: !Ref StreamlitVPC

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Streamlit UI Endpoint Security Group"
      GroupName: !Sub "${AWS::StackName}-ep-sg"
      SecurityGroupEgress:
         - IpProtocol: tcp
           FromPort: 0
           ToPort: 65535
           CidrIp: 0.0.0.0/0
           Description: Allow outbound access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref StreamlitSecurityGroup
          Description: Allow inbound from Streamlit sg only
      VpcId: !Ref StreamlitVPC

  StreamlitRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StreamlitVPC

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref StreamlitInternetGateway
      RouteTableId: !Ref StreamlitRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref StreamlitSubnet1
      RouteTableId: !Ref StreamlitRouteTable

  SubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref StreamlitSubnet2
      RouteTableId: !Ref StreamlitRouteTable

  StreamlitVPCEndpointECRApi:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      SubnetIds:
        - !Ref StreamlitSubnet1
        - !Ref StreamlitSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref StreamlitVPC
      PrivateDnsEnabled: true

  StreamlitVPCEndpointDocker:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      SubnetIds:
        - !Ref StreamlitSubnet1
        - !Ref StreamlitSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref StreamlitVPC
      PrivateDnsEnabled: true

  StreamlitVPCEndpointLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      SubnetIds: 
        - !Ref StreamlitSubnet1
        - !Ref StreamlitSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref StreamlitVPC
      PrivateDnsEnabled: true

  StreamlitVPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref StreamlitVPC
      RouteTableIds:
        - !Ref StreamlitRouteTable

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref StreamlitSubnet1
        - !Ref StreamlitSubnet2
      SecurityGroups:
        - !Ref   StreamlitSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref iECRStreamlitPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-tg-http"
      VpcId: !Ref StreamlitVPC
      Port: !Ref iECRStreamlitPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/_stcore/health"
      HealthCheckPort: !Ref iECRStreamlitPort
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "86500"

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LoadBalancerListener
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: "X86_64"
        OperatingSystemFamily: "LINUX"
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: "streamlit"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docsearch-ecr"
          MemoryReservation: 2048
          Cpu: 2048
          Memory: 4096
          Essential: true
          PortMappings:
            - ContainerPort: !Ref iECRStreamlitPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${AWS::StackName}-ECSTask"
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: "ecs"

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTask
      DesiredCount: 1
      LaunchType: FARGATE
      ServiceName: !Sub "${AWS::StackName}-svc"
      SchedulingStrategy: "REPLICA"
      LoadBalancers:
        - ContainerName: "streamlit"
          ContainerPort: !Ref iECRStreamlitPort
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref StreamlitSecurityGroup
          Subnets:
            - !Ref StreamlitSubnet1
            - !Ref StreamlitSubnet2

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-execution-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:CreateLogGroup"
                Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiEndpoint:
    Description: "API Gateway endpoint URL, set this in the Demo UI: Administration tab, API Endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  DynamoDBTableName:
    Description: "Unicorn Inventory DynamoDB table name"
    Value: !Ref UnicornInventoryTable
  UnicornInventoryBucket:
    Description: "Unicorn Inventory Bucket Name"
    Value: !Ref UnicornInventoryBucket
  GetInventoryFunction:
    Description: "Name of the Lambda function required in the 'Invoke a Lambda function in the cloud' section."
    Value: !Ref GetInventoryFunction
  GetFileValidatorARN:
    Description: "ARN of the Lambda function required in the 'OPTIONAL: Invoke a Lambda function in the cloud' section."
    Value: !GetAtt FileValidator.Arn
  oUiDnsName:
    Description: Host UI web link name
    Value: !Sub "http://${LoadBalancer.DNSName}:${iECRStreamlitPort}"
